#!/usr/bin/env python

import collections
import datetime
import fnmatch
import git
import os
import oursql
import re
from signal import signal, SIGPIPE, SIG_DFL
from indexer_site_extensions import is_indexable_line
from xml.sax.saxutils import escape
import yaml


def main():

    # http://stackoverflow.com/a/16865106/240515
    signal(SIGPIPE, SIG_DFL)

    config, repos = get_configuration()

    documents = Documents(config)
    documents.clear()

    sphinx_id = 1

    print u'<?xml version="1.0" encoding="utf-8"?>'
    print u'<sphinx:docset>'

    print u'<sphinx:schema>'
    print u'<sphinx:field name="ext"/>'
    print u'<sphinx:field name="filename"/>'
    print u'<sphinx:field name="project"/>'
    print u'<sphinx:field name="content"/>'
    print u'</sphinx:schema>'

    for repo_info in repos:

        repo = git.Repo(repo_info.abspath)

        for git_obj in repo.heads.master.commit.tree.traverse():

            if git_obj.type != 'blob':
                continue

            if is_blacklisted_type(config, git_obj):
                continue

            # The intent is to index all text files and omit all binary files. This is a simple and efficient method,
            # and I'm currently experimenting to see if it's accurate enough.
            if 'text' not in git_obj.mime_type:
                continue

            # A potentially expensive operation. For now, I'm going to let you use the above line to filter out the
            # large, obviously-not-to-be-indexed files instead of trying to optimize this.
            text = git_obj.data_stream.read()

            try:
                text = git_obj.data_stream.read().decode('utf-8')
            except UnicodeDecodeError:
                # Skip files with invalid UTF-8
                continue

            # Skip lines that are not to be indexed
            text = '\n'.join([
                line for line in text.splitlines() if is_indexable_line(line)
            ])

            filename = os.path.basename(git_obj.path)
            _, ext = os.path.splitext(git_obj.path)

            indexable = Indexable(ext=ext, filename=filename,
                                  path=git_obj.path, project=repo_info.project,
                                  text=text)

            print u'<sphinx:document id="{}">'.format(sphinx_id)
            print u'<ext>{}</ext>'.format(indexable.ext)
            print u'<filename>{}</filename>'.format(indexable.filename)
            print u'<project>{}</project>'.format(indexable.project)
            print u'<content>'
            print u'<![CDATA[['
            content = escape(_strip_control_characters(indexable.text))
            print content.encode('utf-8')
            print u']]>'
            print u'</content>'
            print u'</sphinx:document>'

            documents.insert(sphinx_id, indexable)
            sphinx_id += 1

    update_info = os.path.join(config.codesearch_path, 'update_info.yaml')
    with open(update_info, 'w') as f:
        yaml.dump({'last_updated': datetime.datetime.now()}, f)


def is_blacklisted_type(config, git_obj):
    filename = os.path.basename(git_obj.path)
    return any(fnmatch.fnmatch(filename, pattern) for pattern in
               config.patterns)

RepoInfo = collections.namedtuple('RepoInfo', ['abspath', 'project'])
Indexable = collections.namedtuple('Indexable',
                                   ['ext', 'filename', 'path', 'project',
                                    'text'])
Config = collections.namedtuple('Config',
                                ['codesearch_path', 'mysql', 'patterns', 'project_re'])


def get_configuration():

    current_dir = os.path.dirname(os.path.abspath(__file__))

    repos_yaml = os.path.join(current_dir, 'repos.yaml')

    with open(repos_yaml) as f:
        repos = [RepoInfo(**repo) for repo in yaml.load(f)]

    config_yaml = os.path.join(current_dir, 'config.yaml')

    with open(config_yaml) as f:
        config = yaml.load(f)

    return Config(**config), repos,


def _strip_control_characters(text):

    # http://chase-seibert.github.io/blog/2011/05/20/
    #     stripping-control-characters-in-python.html

    # Unicode invalid characters
    RE_XML_ILLEGAL =\
        u'([\u0000-\u0008\u000b-\u000c\u000e-\u001f\ufffe-\uffff])' + \
        u'|' + \
        u'([%s-%s][^%s-%s])|([^%s-%s][%s-%s])|([%s-%s]$)|(^[%s-%s])' % \
        (unichr(0xd800), unichr(0xdbff), unichr(0xdc00), unichr(0xdfff),
         unichr(0xd800), unichr(0xdbff), unichr(0xdc00), unichr(0xdfff),
         unichr(0xd800), unichr(0xdbff), unichr(0xdc00), unichr(0xdfff),)

    # We replace with a space, and not with an empty string, because these
    # control characters include line breaking characters. We don't want
    # want the following:
    #    import a
    #    import b
    # to become
    #    import aimport b

    text = re.sub(RE_XML_ILLEGAL, " ", text)

    # ASCII control characters
    text = re.sub(r"[\x01-\x1F\x7F]", " ", text)

    return text


class Documents(object):

    def __init__(self, config):
        mysql = config.mysql
        for key, value in mysql.items():
            if value is None:
                del mysql[key]
        self._conn = oursql.connect(**mysql)

    def insert(self, sphinx_id, indexable):
        cursor = self._conn.cursor()
        query = ''.join(['INSERT INTO documents (id, path, project, ',
                         'text) VALUES (?, ?, ?, ?)'])
        cursor.execute(
            query,
            (sphinx_id, indexable.path, indexable.project, indexable.text))

    def clear(self):
        cursor = self._conn.cursor()
        cursor.execute('DELETE FROM documents')


if __name__ == '__main__':
    main()
