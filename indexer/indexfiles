#!/opt/Python-2.7.8-empty/bin/python


import collections
import fnmatch
import git
import os
import oursql
import posixpath
import re
from signal import signal, SIGPIPE, SIG_DFL
import urlparse
import yaml
from xml.etree import ElementTree


def main():

    # http://stackoverflow.com/a/16865106/240515
    signal(SIGPIPE, SIG_DFL)

    config, repos = get_configuration()

    project_regex = re.compile(config.project_re)

    xml_builder = XmlBuilder()

    documents = Documents()
    documents.clear()

    for repo_path in repos:

        repo = git.Repo(repo_path)

        for git_obj in repo.heads.master.commit.tree.traverse():
            if git_obj.type != 'blob':
                continue
            if not is_indexed_type(config, git_obj):
                continue

            try:
              text = git_obj.data_stream.read().decode('utf-8')
            except UnicodeDecodeError:
                # Skip files with invalid UTF-8
                continue

            filename = os.path.basename(git_obj.path)
            _, ext = os.path.splitext(git_obj.path)

            project = project_regex.match(repo_path).group('project')

            indexable = Indexable(ext=ext, filename=filename,
                                  path=git_obj.path, project=project,text=text)

            sphinx_id = xml_builder.append(indexable)
            documents.insert(sphinx_id, indexable)

    print xml_builder


def is_indexed_type(config, git_obj):
    return any(fnmatch.fnmatch(git_obj.path, pattern) for pattern in
               config.patterns)

Indexable = collections.namedtuple('Indexable',
                                   ['ext', 'filename', 'path', 'project',
                                    'text'])
Config = collections.namedtuple('Config', ['patterns', 'project_re'])


def get_configuration():

    current_dir = os.path.dirname(os.path.abspath(__file__))

    repos_yaml = os.path.join(current_dir, 'repos.yaml')

    with open(repos_yaml) as f:
        repos = yaml.load(f)

    config_yaml = os.path.join(current_dir, 'config.yaml')

    with open(config_yaml) as f:
        config = yaml.load(f)

    return Config(config['patterns'], config['project_re']), repos,


class XmlBuilder(object):

    def __init__(self):
        self.__docset = ElementTree.Element('sphinx:docset')

        schema = ElementTree.SubElement(self.__docset, 'sphinx:schema')
        attr = ElementTree.SubElement(schema, 'sphinx:field', name='ext')
        attr = ElementTree.SubElement(schema, 'sphinx:field', name='filename')
        attr = ElementTree.SubElement(schema, 'sphinx:field', name='project')
        field = ElementTree.SubElement(schema, 'sphinx:field', name='content')

        # Stop complaints about the identifier being unused. :)
        assert attr is not None
        assert field is not None

        self.__sphinx_id = 1

    def append(self, indexable):

        document = ElementTree.SubElement(self.__docset, 'sphinx:document',
                                          {'id': str(self.__sphinx_id)})

        ext = ElementTree.SubElement(document, 'ext')
        ext.text = indexable.ext

        filename = ElementTree.SubElement(document, 'filename')
        filename.text = indexable.filename

        path = ElementTree.SubElement(document, 'project')
        path.text = indexable.project

        content = ElementTree.SubElement(document, 'content')
        stripped = self._strip_control_characters(indexable.text)
        cdata = u'<![CDATA[[{}]]>'.format(stripped)
        content.text = cdata

        old_id = self.__sphinx_id
        self.__sphinx_id += 1
        return old_id

    def __str__(self):

        header = '<?xml version="1.0" encoding="utf-8"?>'
        body = ElementTree.tostring(self.__docset, encoding='utf-8')
        return '{}{}'.format(header, body)

    @staticmethod
    def _strip_control_characters(text):

        # http://chase-seibert.github.io/blog/2011/05/20/
        #     stripping-control-characters-in-python.html

        # Unicode invalid characters
        RE_XML_ILLEGAL =\
            u'([\u0000-\u0008\u000b-\u000c\u000e-\u001f\ufffe-\uffff])' + \
            u'|' + \
            u'([%s-%s][^%s-%s])|([^%s-%s][%s-%s])|([%s-%s]$)|(^[%s-%s])' % \
            (unichr(0xd800), unichr(0xdbff), unichr(0xdc00), unichr(0xdfff),
             unichr(0xd800), unichr(0xdbff), unichr(0xdc00), unichr(0xdfff),
             unichr(0xd800), unichr(0xdbff), unichr(0xdc00), unichr(0xdfff),)
        text = re.sub(RE_XML_ILLEGAL, "", text)

        # ASCII control characters
        text = re.sub(r"[\x01-\x1F\x7F]", "", text)

        return text


class Documents(object):

    def __init__(self):
        self._conn = oursql.connect(user='codesearch', passwd='codesearch',
                                    db='codesearch')

    def insert(self, sphinx_id, indexable):
        cursor = self._conn.cursor()
        query = ''.join(['INSERT INTO documents (id, path, project, ',
                         'text) VALUES (?, ?, ?, ?)'])
        cursor.execute(query,
           (sphinx_id, indexable.path, indexable.project, indexable.text))

    def clear(self):
        cursor = self._conn.cursor()
        cursor.execute('DELETE FROM documents')


if __name__ == '__main__':
    main()
