#!/usr/bin/env python

import argparse
import fnmatch
import os
from xml.etree import ElementTree
from signal import signal, SIGPIPE, SIG_DFL
import re

# Edit this, for the files you want to index.
PATTERNS = ['*.js', '*.mel', '*.py', '*.yaml']


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('docdir')
    args = parser.parse_args()

    # http://stackoverflow.com/a/16865106/240515
    signal(SIGPIPE, SIG_DFL)

    docdir = os.path.expanduser(args.docdir)
    xml = get_xml(docdir)
    print_xml(xml)


def print_xml(xml):
    print '<?xml version="1.0" encoding="utf-8"?>'
    print ElementTree.tostring(xml, encoding='utf-8')


def get_xml(docdir):
    docset = ElementTree.Element('sphinx:docset')

    schema = ElementTree.SubElement(docset, 'sphinx:schema')
    attr = ElementTree.SubElement(schema, 'sphinx:attr', name='path',
                                  type='string')
    # File extension
    attr = ElementTree.SubElement(schema, 'sphinx:field', name='ext',
                                  type='string')
    field = ElementTree.SubElement(schema, 'sphinx:field', name='content')

    # Stop complaints about the identifier being unused. :)
    assert attr is not None
    assert field is not None

    for i, filename in enumerate(iterfiles(docdir)):

        with open(filename) as f:

            body = f.read()
            body = strip_control_characters(body)

            try:
                body = body.decode('utf-8')
            except UnicodeDecodeError:
                # Skip files with invalid UTF-8
                continue

            document = ElementTree.SubElement(docset, 'sphinx:document',
                                              {'id': str(i + 1)})
            path = ElementTree.SubElement(document, 'path')
            path.text = filename

            ext = ElementTree.SubElement(document, 'ext')
            extension = os.path.splitext(filename)[1]
            if extension:
                ext.text = extension[1:]
            else:
                ext.text = ''

            content = ElementTree.SubElement(document, 'content')
            cdata = u'<![CDATA[[{}]]>'.format(body)
            content.text = cdata

    return docset


def iterfiles(docdir):

    docdir = os.path.expanduser(docdir)
    for root, dirs, files in os.walk(docdir):
        files = [f for f in files if not f[0] == '.']
        dirs[:] = [d for d in dirs if not d[0] == '.']

        for filename in filterfiles(files):
            yield os.path.join(root, filename)


def filterfiles(filelist):

    files = set()
    for pattern in PATTERNS:
        for match in fnmatch.filter(filelist, pattern):
            files.add(match)

    return files


# http://chase-seibert.github.io/blog/2011/05/20/
#     stripping-control-characters-in-python.html
def strip_control_characters(text):

    # unicode invalid characters
    RE_XML_ILLEGAL =\
        u'([\u0000-\u0008\u000b-\u000c\u000e-\u001f\ufffe-\uffff])' + u'|' + \
        u'([%s-%s][^%s-%s])|([^%s-%s][%s-%s])|([%s-%s]$)|(^[%s-%s])' % \
        (unichr(0xd800), unichr(0xdbff), unichr(0xdc00), unichr(0xdfff),
         unichr(0xd800), unichr(0xdbff), unichr(0xdc00), unichr(0xdfff),
         unichr(0xd800), unichr(0xdbff), unichr(0xdc00), unichr(0xdfff),)
    text = re.sub(RE_XML_ILLEGAL, "", text)

    # ascii control characters
    text = re.sub(r"[\x01-\x1F\x7F]", "", text)

    return text

if __name__ == '__main__':
    main()
